<?php

/**
 * @file
 * Install and uninstall functions for the commerce_multistore module.
 */

use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_install().
 */
function commerce_multistore_install() {
  // Disable default Stores view.
  if (\Drupal::moduleHandler()->moduleExists('views')) {
    $view = \Drupal::configFactory()->getEditable('views.view.commerce_stores');
    if ($view) {
      $view->set('status', FALSE);
      $view->save();
    }
  }

  $entity_manager = \Drupal::entityManager();
  $store_types = array_keys($entity_manager->getStorage('commerce_store_type')->loadMultiple());
  $product_types = array_keys($entity_manager->getStorage('commerce_product_type')->loadMultiple());

  if ($role = user_role_load('commerce_multistore_owner')) {
    $permissions = $role->getPermissions();
    // Add crud permissions for all existing store types.
    foreach ($store_types as $store_type) {
      $permissions[] = "create {$store_type} commerce_store";
      $permissions[] = "update own {$store_type} commerce_store";
      // @todo Should be a regular store owner allowed to delete own store?
      // $permissions[] = "delete own {$store_type} commerce_store";
    }

    // Add crud permissions for all existing product types.
    foreach ($product_types as $product_type) {
      $permissions[] = "create {$product_type} commerce_product";
      $permissions[] = "update own {$product_type} commerce_product";
      $permissions[] = "delete own {$product_type} commerce_product";
    }

    $role->set('permissions', array_unique($permissions));
    $role->save();
  }

  // Add multistore owner permissions to admin's permissions.
  if ($role && $admin_role = user_role_load('commerce_multistore_admin')) {
    $permissions = $admin_role->getPermissions();
    $owner_permissions = $role->getPermissions();

    foreach ($store_types as $store_type) {
      $permissions[] = "delete own {$store_type} commerce_store";
      $permissions[] = "delete any {$store_type} commerce_store";
      $permissions[] = "update any {$store_type} commerce_store";
    }

    foreach ($product_types as $product_type) {
      $permissions[] = "update any {$product_type} commerce_product";
      $permissions[] = "delete any {$product_type} commerce_product";
    }

    $permissions = array_merge($permissions, $owner_permissions);
    $admin_role->set('permissions', array_unique($permissions));
    $admin_role->save();
  }
}


/**
 * Implements hook_uninstall().
 */
function commerce_multistore_uninstall() {
  // Make some clean up after ourselves.
  if ($role = user_role_load('commerce_multistore_owner')) {
    $role->delete();
  }
  if ($role = user_role_load('commerce_multistore_admin')) {
    $role->delete();
  }

  $config = \Drupal::configFactory();

  $store_settings = $config->getEditable('commerce_store.settings');
  if ($store_settings->get('commerce_multistore')) {
   $store_settings->clear('commerce_multistore');
   $store_settings->save();
  }

  $action = $config->getEditable('system.action.commerce_multistore_mark_as_default');
  if ($action) {
    $action->delete();
  }

  $action = $config->getEditable('system.action.commerce_multistore_mark_as_owner_default');
  if ($action) {
    $action->delete();
  }

  if (\Drupal::moduleHandler()->moduleExists('views')) {

    $view = $config->getEditable('views.view.commerce_multistore_administer_stores');
    if ($view && !$view->isNew()) {
      $view->delete();
    }

    $view = $config->getEditable('views.view.commerce_stores');
    if ($view) {
      $view->set('status', TRUE);
      $view->save();
    }
  }
}
