<?php

/**
 * @file
 * Contains commerce_multistore.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\commerce_multistore\MultistoreStorage;
use Drupal\commerce_multistore\Form\MultistoreForm;
use Drupal\commerce_multistore\Form\MultistoreProductForm;
use Drupal\commerce_multistore\MultistoreAccessControlHandler;
use Drupal\commerce_multistore\MultistoreProductTypeAccessControlHandler;
use Drupal\commerce_multistore\Plugin\views\argument_default\MultistoreUser;

/**
 * Implements hook_help().
 */
function commerce_multistore_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the commerce_multistore module.
    case 'help.page.commerce_multistore':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Implements multiple stores/store owners model.') . '</p>';

      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function commerce_multistore_theme() {
  return [
    'commerce_multistore_label_compact' => [
      'variables' =>
        [
          'attributes' => [],
          'content_attributes' => [],
        ],
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 */
function commerce_multistore_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['commerce_store']->setStorageClass(MultistoreStorage::class);
  $entity_types['commerce_store']->setFormClass('add', MultistoreForm::class);
  $entity_types['commerce_store']->setFormClass('edit', MultistoreForm::class);
  $entity_types['commerce_store']->setFormClass('default', MultistoreForm::class);
  $entity_types['commerce_product']->setFormClass('add', MultistoreProductForm::class);
  $entity_types['commerce_product']->setFormClass('edit', MultistoreProductForm::class);
  $entity_types['commerce_product']->setFormClass('default', MultistoreProductForm::class);
  $entity_types['commerce_store']->setAccessClass(MultistoreAccessControlHandler::class);
  $entity_types['commerce_product_type']->setAccessClass(MultistoreProductTypeAccessControlHandler::class);
}

/**
 * Implements hook_views_plugins_argument_default_alter().
 */
function commerce_multistore_views_plugins_argument_default_alter(array &$plugins) {
  $plugins['user']['class'] = MultistoreUser::class;
}
